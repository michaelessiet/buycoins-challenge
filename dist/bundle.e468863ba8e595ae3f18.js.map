{"version":3,"sources":["webpack:///./src/script.js"],"names":["document","getElementById","form","profileimage","githubname","username","profiledescription","followers","following","stars","repocol","reponumber","repoitem","repoitemtitlelink","repodesc","repolang","repoupdatetime","repolist","addEventListener","e","name","value","push","async","user","fetch","method","headers","body","JSON","stringify","query","variables","then","res","innerHTML","json","data","innerText","setAttribute","length","console","log","i","listitem","createElement","Date","toDateString","outerHTML","appendChild","requestUser","querySelector","preventDefault"],"mappings":"MACiBA,SAASC,eAAe,QAAzC,MACMC,EAAOF,SAASC,eAAe,QAE/BE,GADQH,SAASC,eAAe,SACjBD,SAASC,eAAe,iBACvCG,EAAaJ,SAASC,eAAe,cACrCI,EAAWL,SAASC,eAAe,YACnCK,EAAqBN,SAASC,eAAe,sBAC7CM,EAAYP,SAASC,eAAe,aACpCO,EAAYR,SAASC,eAAe,aACpCQ,EAAQT,SAASC,eAAe,SAChCS,EAAUV,SAASC,eAAe,WAClCU,EAAaX,SAASC,eAAe,cACrCW,EAAWZ,SAASC,eAAe,YAEnCY,GADgBb,SAASC,eAAe,iBACpBD,SAASC,eAAe,sBAC5Ca,EAAWd,SAASC,eAAe,YACnCc,EAAWf,SAASC,eAAe,YACnCe,EAAiBhB,SAASC,eAAe,kBAC/C,IAAIgB,EAAU,GAmGdf,EAAKgB,iBAAiB,UAAWC,IAEZ,KAAfC,KAAKC,OAA8B,MAAdD,KAAKC,OAAgC,MAAfD,KAAKC,OADrC,GAEJC,KAAK,0BA1FlBC,eAA2BC,GAEzBC,MAAM,iCAAkC,CACtCC,OAAQ,OACRC,QAAS,CACP,cACE,kDACF,eAAgB,uBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAQ,uzBAkCRC,UAAW,CACT,UAAaR,OAIhBS,MAAMC,IACLxB,EAAQyB,UAAU,GACXD,EAAIE,UAEZH,MAAMI,IACLjC,EAAWkC,UAAYD,EAAI,KAAJ,UACvBhC,EAASiC,UAAYD,EAAI,KAAJ,WACrB/B,EAAmBgC,UAAYD,EAAI,KAAJ,SAC/B9B,EAAU+B,UAAYD,EAAI,KAAJ,0BACtB7B,EAAU8B,UAAYD,EAAI,KAAJ,0BACtB5B,EAAM6B,UAAYD,EAAI,KAAJ,oCAClBlC,EAAaoC,aAAa,MAAOF,EAAI,KAAJ,gBACjCpB,EAAWoB,EAAI,KAAJ,wBACX1B,EAAW2B,UAAYrB,EAASuB,OAChCC,QAAQC,IAAIzB,GACZ,IAAI,IAAI0B,EAAG,EAAGA,EAAE1B,EAASuB,OAAQG,IAAI,CACnC,IAAIC,EAAW5C,SAAS6C,cAAc,OAEtChC,EAAkByB,UAAYrB,EAAS0B,GAAT,UAC9B9B,EAAkB0B,aAAa,OAAQtB,EAAS0B,GAAT,UACvC7B,EAASwB,UAAYrB,EAAS0B,GAAT,iBACrB3B,EAAesB,UAAa,cAAa,IAAIQ,KAAK7B,EAAS0B,GAAT,gBAAkCI,iBACpFN,QAAQC,IAAIzB,EAAS0B,GAAT,gBAEmC,OAA3C1B,EAAS0B,GAAT,uBACF5B,EAASuB,UAAYrB,EAAS0B,GAAT,2BAGuB,MAA1C1B,EAAS0B,GAAT,uBACF5B,EAASuB,UAAY,IAGvBM,EAAST,UAAYvB,EAASoC,UAC9BtC,EAAQuC,YAAYL,OAY1BM,CAAYlD,SAASmD,cAAc,SAAS9B,OAC5CF,EAAEiC,qB","file":"bundle.e468863ba8e595ae3f18.js","sourcesContent":["\nconst fullname = document.getElementById(\"name\");\nconst form = document.getElementById(\"form\");\nconst error = document.getElementById(\"error\");\nconst profileimage = document.getElementById(\"profileimage\");\nconst githubname = document.getElementById(\"githubname\");\nconst username = document.getElementById(\"username\");\nconst profiledescription = document.getElementById(\"profiledescription\");\nconst followers = document.getElementById(\"followers\");\nconst following = document.getElementById(\"following\");\nconst stars = document.getElementById(\"stars\");\nconst repocol = document.getElementById('repocol');\nconst reponumber = document.getElementById('reponumber')\nconst repoitem = document.getElementById('repoitem')\nconst repoitemtitle = document.getElementById('repoitemtitle')\nconst repoitemtitlelink = document.getElementById('repoitemtitlelink')\nconst repodesc = document.getElementById('repodesc')\nconst repolang = document.getElementById('repolang')\nconst repoupdatetime = document.getElementById('repoupdatetime')\nlet repolist= []\n\nlet jsonresponse;\n\nclass GetResponses {\n  static async fetchUser(username) {\n    return fetch(`https://api.github.com/users/${username}`)\n      .then((res) => res.json())\n      .then((data) => console.log(data));\n  }\n}\n\nasync function requestUser(user) {\n  const usereg = \"michaelessiet\";\n  fetch(\"https://api.github.com/graphql\", {\n    method: \"POST\",\n    headers: {\n      'Authorization':\n        \"Bearer\" + \" \" + \"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\",\n      \"Content-Type\": \"application/graphql\",\n    },\n    body: JSON.stringify({\n      query: `\n        query($loginname: String!){\n          user(login: $loginname){\n            login\n            name\n            avatarUrl\n            bio\n            followers(first: 10) {\n              totalCount\n            }\n            following(last:10){\n              totalCount\n            }\n            starredRepositories{\n              totalCount\n            }\n            repositories(last: 20) {\n              edges {\n                node {\n                  name\n                  url\n                  stargazerCount\n                  forkCount\n                  description\n                  updatedAt\n                  primaryLanguage{\n                    name\n                  }\n                  description\n                }\n              }\n            }\n          }\n        }`,\n      variables: {\n        \"loginname\": user\n      },\n    }),\n  })\n    .then((res) => {\n      repocol.innerHTML=''\n      return res.json()\n    })\n    .then((data) =>  {\n      githubname.innerText = data[\"data\"][\"user\"][\"name\"]\n      username.innerText = data[\"data\"][\"user\"][\"login\"]\n      profiledescription.innerText = data[\"data\"][\"user\"][\"bio\"]\n      followers.innerText = data[\"data\"][\"user\"][\"followers\"]['totalCount']\n      following.innerText = data[\"data\"][\"user\"][\"following\"]['totalCount']\n      stars.innerText = data[\"data\"]['user']['starredRepositories']['totalCount']\n      profileimage.setAttribute('src', data['data']['user']['avatarUrl'])\n      repolist = data[\"data\"]['user']['repositories']['edges']\n      reponumber.innerText = repolist.length\n      console.log(repolist)\n      for(let i= 0; i<repolist.length; i++){\n        let listitem = document.createElement('div')\n\n        repoitemtitlelink.innerText = repolist[i]['node']['name']\n        repoitemtitlelink.setAttribute('href', repolist[i]['node']['url'])\n        repodesc.innerText = repolist[i]['node']['description']\n        repoupdatetime.innerText = `Updated on ${new Date(repolist[i]['node']['updatedAt']).toDateString()}`\n        console.log(repolist[i]['node']['updatedAt'])\n\n        if( repolist[i]['node']['primaryLanguage'] !== null){\n          repolang.innerText = repolist[i]['node']['primaryLanguage']['name']\n        }\n\n        if( repolist[i]['node']['primaryLanguage'] == null){\n          repolang.innerText = ''\n        }\n\n        listitem.innerHTML = repoitem.outerHTML\n        repocol.appendChild(listitem) \n      }\n    })\n}\n\nform.addEventListener(\"submit\", (e) => {\n  let messages = [];\n  if (name.value === \"\" || name.value == null || name.value === \" \") {\n    messages.push(\"A username is required\");\n  }\n\n  // GetResponses.fetchUser(document.querySelector(\"#name\").value);\n  requestUser(document.querySelector('#name').value)\n  e.preventDefault();\n});\n\n"],"sourceRoot":""}